// Implemented the smart tool selection flow, enabling the agent to choose and use tools based on the prompt.

'use server';

/**
 * @fileOverview An AI agent that intelligently selects and uses appropriate tools based on the user's prompt.
 *
 * - smartToolSelection - A function that handles the tool selection and execution process.
 * - SmartToolSelectionInput - The input type for the smartToolSelection function.
 * - SmartToolSelectionOutput - The return type for the smartToolSelection function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const SmartToolSelectionInputSchema = z.object({
  prompt: z.string().describe('The user prompt.'),
});
export type SmartToolSelectionInput = z.infer<typeof SmartToolSelectionInputSchema>;

const SmartToolSelectionOutputSchema = z.object({
  response: z.string().describe('The response generated by the agent using the selected tool.'),
});
export type SmartToolSelectionOutput = z.infer<typeof SmartToolSelectionOutputSchema>;

export async function smartToolSelection(input: SmartToolSelectionInput): Promise<SmartToolSelectionOutput> {
  return smartToolSelectionFlow(input);
}

// Define a tool for calculation
const calculator = ai.defineTool({
  name: 'calculator',
  description: 'Useful for getting the answer to mathematical expression. The input to this tool should be a plain mathematical expression.',
  inputSchema: z.object({
    expression: z.string().describe('A plain mathematical expression that can be evaluated.'),
  }),
  outputSchema: z.number(),
}, async (input) => {
  try {
    // eslint-disable-next-line no-eval
    return eval(input.expression) as number;
  } catch (e) {
    return NaN;
  }
});

// Define a tool for web search
const webSearch = ai.defineTool({
  name: 'webSearch',
  description: 'Useful for searching the web to get up-to-date information on any topic.',
  inputSchema: z.object({
    query: z.string().describe('A search query to run on the web.'),
  }),
  outputSchema: z.string(),
}, async (input) => {
  // Replace with actual web search implementation
  return `Web search results for ${input.query}: Placeholder search results.`;
});

const smartToolSelectionPrompt = ai.definePrompt({
  name: 'smartToolSelectionPrompt',
  input: {schema: SmartToolSelectionInputSchema},
  output: {schema: SmartToolSelectionOutputSchema},
  tools: [calculator, webSearch],
  prompt: `You are an intelligent agent that can select and use tools to answer user prompts.

  Here are the available tools:
  {{#each tools}}
  - {{this.name}}: {{this.description}}
  {{/each}}

  Based on the user's prompt, determine which tool is most appropriate to use. If no tool is needed, respond directly without using any tools.

  User prompt: {{{prompt}}}

  Response:`,
});

const smartToolSelectionFlow = ai.defineFlow(
  {
    name: 'smartToolSelectionFlow',
    inputSchema: SmartToolSelectionInputSchema,
    outputSchema: SmartToolSelectionOutputSchema,
  },
  async input => {
    const {output} = await smartToolSelectionPrompt(input);
    return output!;
  }
);
