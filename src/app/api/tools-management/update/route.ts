// This is a new file for the file-based tool management system.
'use server';

import { NextResponse } from 'next/server';
import fs from 'fs/promises';
import path from 'path';
import { ToolFormSchema, type ToolFormData, type ToolDefinition } from '@/lib/types';
import { z } from 'zod';

// Helper to sanitize tool name
const sanitizeToolName = (name: string): string => {
    return name.trim().toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
};

const createToolFileContent = (toolData: ToolDefinition): string => {
    const envString = toolData.env && Object.keys(toolData.env).length > 0 ? `,
  env: ${JSON.stringify(toolData.env, null, 2)}` : '';
    
    return `// This is an autogenerated file from Firebase Studio.
import type { ToolDefinition } from '@/lib/types';

const tool: ToolDefinition = {
  name: '${toolData.name}',
  description: '${toolData.description || ''}',
  command: '${toolData.command}',
  args: ${JSON.stringify(toolData.args)},
  enabled: ${toolData.enabled}${envString}
};

export default tool;
`;
};

export async function POST(request: Request) {
    try {
        const { originalName, toolData } = await request.json() as { originalName: string, toolData: ToolFormData };
        
        // Use a temporary schema for the incoming request, as name can't be changed.
        const UpdateRequestSchema = z.object({
            originalName: z.string(),
            toolData: ToolFormSchema,
        });
        
        const requestParse = UpdateRequestSchema.safeParse({ originalName, toolData });
        if (!requestParse.success) {
            return NextResponse.json({ error: 'Invalid request data', details: requestParse.error.flatten() }, { status: 400 });
        }
        
        const finalToolData = requestParse.data.toolData;

        const toolFolderName = sanitizeToolName(originalName);
        const toolsDir = path.join(process.cwd(), 'src', 'tools');
        const toolDir = path.join(toolsDir, toolFolderName);

        try {
            await fs.access(toolDir);
        } catch (error) {
            return NextResponse.json({ error: `Tool with original name '${originalName}' not found.` }, { status: 404 });
        }
        
        // Note: Renaming the tool folder (and thus the tool name) is disallowed to maintain consistency.
        // The name field in the form is disabled.

        const filePath = path.join(toolDir, 'index.ts');
        const fileContent = createToolFileContent(finalToolData as ToolDefinition);
        await fs.writeFile(filePath, fileContent, 'utf-8');
        
        return NextResponse.json({ message: 'Tool updated successfully', tool: finalToolData });

    } catch (e) {
        console.error('Error updating tool:', e);
        const errorMessage = e instanceof Error ? e.message : 'An internal server error occurred.';
        return NextResponse.json({ error: errorMessage }, { status: 500 });
    }
}
