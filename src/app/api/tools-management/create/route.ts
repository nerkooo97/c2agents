
import { NextResponse } from 'next/server';
import fs from 'fs/promises';
import path from 'path';
import { PluginFormSchema, type PluginDefinition } from '@/lib/types';

// Helper to sanitize tool name for folder creation
const sanitizeToolName = (name: string): string => {
    return name.trim().toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
};

const createToolFileContent = (toolData: PluginDefinition): string => {
    const envString = toolData.env ? `,
  env: ${JSON.stringify(toolData.env, null, 2)}` : '';
    
    return `// This is an autogenerated file from Firebase Studio.
import type { PluginDefinition } from '@/lib/types';

const tool: PluginDefinition = {
  name: '${toolData.name}',
  description: '${toolData.description || ''}',
  command: '${toolData.command}',
  args: ${JSON.stringify(toolData.args)},
  enabled: ${toolData.enabled}${envString}
};

export default tool;
`;
};

export async function POST(request: Request) {
    try {
        const body = await request.json();
        const parseResult = PluginFormSchema.safeParse(body);

        if (!parseResult.success) {
            return NextResponse.json({ error: 'Invalid plugin data', details: parseResult.error.flatten() }, { status: 400 });
        }

        const pluginData = parseResult.data;
        const pluginFolderName = sanitizeToolName(pluginData.name);

        if (!pluginFolderName) {
            return NextResponse.json({ error: 'Plugin name is invalid or results in an empty folder name.' }, { status: 400 });
        }

        const toolsDir = path.join(process.cwd(), 'src', 'plugins');
        const toolDir = path.join(toolsDir, pluginFolderName);

        try {
            await fs.access(toolDir);
            return NextResponse.json({ error: `A plugin with the name '${pluginData.name}' already exists.` }, { status: 409 });
        } catch (error) {
            // Directory doesn't exist, which is what we want.
        }

        await fs.mkdir(toolDir, { recursive: true });

        const filePath = path.join(toolDir, 'index.ts');
        const fileContent = createToolFileContent(pluginData as PluginDefinition);

        await fs.writeFile(filePath, fileContent, 'utf-8');
        
        return NextResponse.json({ message: 'Plugin created successfully', tool: pluginData }, { status: 201 });

    } catch (e) {
        console.error('Error creating tool:', e);
        const errorMessage = e instanceof Error ? e.message : 'An internal server error occurred.';
        return NextResponse.json({ error: errorMessage }, { status: 500 });
    }
}
