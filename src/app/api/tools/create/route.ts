'use server';

import { NextResponse } from 'next/server';
import fs from 'fs/promises';
import path from 'path';
import { ToolDefinitionSchema, type ToolFormData } from '@/lib/types';

const sanitizeToolName = (name: string): string => {
    return name.trim().toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
};

const createToolFileContent = (toolData: ToolFormData): string => {
    const { name, description, inputSchema, functionBody } = toolData;
    
    const escapedName = name.replace(/`/g, '\\`').replace(/\$/g, '\\$');
    const escapedDescription = description.replace(/`/g, '\\`').replace(/\$/g, '\\$');
    
    return `// This is an autogenerated file from Firebase Studio.
import { ai } from '@/ai/genkit';
import { z } from 'zod';

const tool = ai.defineTool({
  name: \`${escapedName}\`,
  description: \`${escapedDescription}\`,
  inputSchema: ${inputSchema},
  outputSchema: z.any(),
}, async (input) => {
  ${functionBody}
});

export default tool;
`;
};

export async function POST(request: Request) {
    try {
        const body = await request.json();
        const parseResult = ToolDefinitionSchema.safeParse(body);

        if (!parseResult.success) {
            return NextResponse.json({ error: 'Invalid tool data', details: parseResult.error.flatten() }, { status: 400 });
        }

        const toolData = parseResult.data;
        const toolFolderName = sanitizeToolName(toolData.name);

        if (!toolFolderName) {
            return NextResponse.json({ error: 'Tool name is invalid or results in an empty folder name.' }, { status: 400 });
        }

        const toolsDir = path.join(process.cwd(), 'src', 'ai', 'tools');
        const toolDir = path.join(toolsDir, toolFolderName);

        try {
            await fs.access(toolDir);
            return NextResponse.json({ error: `A tool with a similar name ('${toolFolderName}') already exists.` }, { status: 409 });
        } catch (error) {
            // Directory doesn't exist, which is what we want.
        }

        await fs.mkdir(toolDir, { recursive: true });

        const filePath = path.join(toolDir, 'index.ts');
        const fileContent = createToolFileContent(toolData);

        await fs.writeFile(filePath, fileContent, 'utf-8');
        
        return NextResponse.json({ message: 'Tool created successfully', tool: toolData }, { status: 201 });

    } catch (e) {
        console.error('Error creating tool:', e);
        const errorMessage = e instanceof Error ? e.message : 'An internal server error occurred.';
        return NextResponse.json({ error: errorMessage }, { status: 500 });
    }
}
