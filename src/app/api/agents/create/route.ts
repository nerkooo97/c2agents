'use server';

import { NextResponse } from 'next/server';
import fs from 'fs/promises';
import path from 'path';
import type { AgentFormData } from '@/lib/types';
import { AgentDefinitionSchema } from '@/lib/types';

// Helper to sanitize agent name for folder creation
const sanitizeAgentName = (name: string): string => {
    return name.trim().toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
};

const createAgentFileContent = (agentData: AgentFormData): string => {
    const toolsString = JSON.stringify(agentData.tools || []);
    const systemPromptString = agentData.systemPrompt.replace(/`/g, '\\`').replace(/\$/g, '\\$');
    const constraintsString = (agentData.constraints || '').replace(/`/g, '\\`').replace(/\$/g, '\\$');
    const defaultTaskString = (agentData.defaultTask || '').replace(/`/g, '\\`').replace(/\$/g, '\\$');

    return `// This is an autogenerated file from Firebase Studio.
import type { AgentDefinition } from '@/lib/types';

const agent: AgentDefinition = {
  name: '${agentData.name}',
  description: '${agentData.description}',
  model: '${agentData.model}',
  systemPrompt: \`${systemPromptString}\`,
  constraints: \`${constraintsString}\`,
  defaultTask: \`${defaultTaskString}\`,
  responseFormat: '${agentData.responseFormat}',
  tools: ${toolsString},
  enableApiAccess: ${agentData.enableApiAccess},
  realtime: ${agentData.realtime},
  enableMemory: ${agentData.enableMemory},
};

export default agent;
`;
};

export async function POST(request: Request) {
    try {
        const body = await request.json();
        const parseResult = AgentDefinitionSchema.safeParse(body);

        if (!parseResult.success) {
            return NextResponse.json({ error: 'Invalid agent data', details: parseResult.error.flatten() }, { status: 400 });
        }

        const agentData = parseResult.data;
        const agentFolderName = sanitizeAgentName(agentData.name);

        if (!agentFolderName) {
            return NextResponse.json({ error: 'Agent name is invalid or results in an empty folder name.' }, { status: 400 });
        }

        const agentsDir = path.join(process.cwd(), 'src', 'agents');
        const agentDir = path.join(agentsDir, agentFolderName);

        try {
            await fs.access(agentDir);
            return NextResponse.json({ error: `An agent with a similar name ('${agentFolderName}') already exists.` }, { status: 409 });
        } catch (error) {
            // Directory doesn't exist, which is what we want.
        }

        await fs.mkdir(agentDir, { recursive: true });

        const filePath = path.join(agentDir, 'index.ts');
        const fileContent = createAgentFileContent(agentData);

        await fs.writeFile(filePath, fileContent, 'utf-8');
        
        return NextResponse.json({ message: 'Agent created successfully', agent: agentData }, { status: 201 });

    } catch (e) {
        console.error('Error creating agent:', e);
        const errorMessage = e instanceof Error ? e.message : 'An internal server error occurred.';
        return NextResponse.json({ error: errorMessage }, { status: 500 });
    }
}
